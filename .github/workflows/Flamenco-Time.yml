name: Build Flamenco

on:
  workflow_dispatch:
    inputs:
      tag_name:
        description: "Tag Name"
        required: true
        default: "v1.0.0"
      package_name:
        description: "Package Name"
        required: true
        default: "Flamenco"

jobs:
  build:
    runs-on: windows-latest

    env:
      Platform: x64
      Configuration: ReleaseUWP
      BuildMode: SideLoadOnly
      AppxBundle: Never
      PackageOutputRootDir: C:\AppPackage
      PackageOutputDir: Flamenco-UWP
      BUILD_DIR: ${{ github.workspace }}/build
      SOURCE_DIR: ${{ github.workspace }}/src/duckstation-uwp
      SDL2_INCLUDE_PATH: ${{ github.workspace }}/dep/msvc/deps-x64/include/SDL2
      SDL2_LIBRARY_PATH: ${{ github.workspace }}/dep/msvc/deps-x64/lib
      SDL2_BIN_PATH: ${{ github.workspace }}/dep/msvc/deps-x64/bin

    steps:
      - name: Checkout Repository
        uses: actions/checkout@v4
        with:
          submodules: true
          fetch-depth: 0

      - name: Build and Install SDL2 for UWP
        run: |
          git clone https://github.com/libsdl-org/SDL.git sdl2-uwp
          cd sdl2-uwp
          git checkout release-2.30.2

          mkdir build
          cd build

          cmake -G "Visual Studio 17 2022" -A x64 `
             -DCMAKE_SYSTEM_NAME=WindowsStore `
             -DCMAKE_SYSTEM_VERSION=10.0 `
             -DSDL_UWP=ON ..
    
          cmake --build . --config Release

          New-Item -ItemType Directory -Force -Path "${{ github.workspace }}/dep/msvc/deps-x64/include/SDL2"
          New-Item -ItemType Directory -Force -Path "${{ github.workspace }}/dep/msvc/deps-x64/lib"
          New-Item -ItemType Directory -Force -Path "${{ github.workspace }}/dep/msvc/deps-x64/bin"

          Copy-Item -Path "../include/*" -Destination "${{ github.workspace }}/dep/msvc/deps-x64/include/SDL2/" -Recurse -Force
          Copy-Item -Path "Release/SDL2.lib" -Destination "${{ github.workspace }}/dep/msvc/deps-x64/lib/"
          Copy-Item -Path "Release/SDL2.dll" -Destination "${{ github.workspace }}/dep/msvc/deps-x64/bin/"
          if (Test-Path "Release/SDL2main.lib") {
          Copy-Item -Path "Release/SDL2main.lib" -Destination "${{ github.workspace }}/dep/msvc/deps-x64/lib/"
          }
        shell: pwsh

      - name: Add MSBuild to PATH
        uses: microsoft/setup-msbuild@v1.1

      - name: Setup Qt
        uses: jurplel/install-qt-action@v3
        with:
          arch: win64_msvc2022_64
          version: 6.8.2

      - name: Setup CMake and Ninja
        uses: lukka/get-cmake@latest

      - name: Generate Self-Signed Certificate
        id: generate_cert
        run: |
          $cert = New-SelfSignedCertificate -CertStoreLocation "Cert:\CurrentUser\My" -Subject "CN=MyUWPCert" `
            -KeyAlgorithm RSA -KeyLength 2048 -Provider "Microsoft Enhanced RSA and AES Cryptographic Provider" `
            -KeyExportPolicy Exportable -NotAfter (Get-Date).AddYears(1) -Type CodeSigningCert
          echo "THUMBPRINT=$($cert.Thumbprint)" | Out-File -FilePath $env:GITHUB_ENV -Append
        shell: pwsh

      - name: Set Package Name
        id: set_package_name
        run: echo "PACKAGE_NAME=${{ github.event.inputs.package_name }}_${{ github.event.inputs.tag_name }}" | Out-File -FilePath $env:GITHUB_ENV -Append
        shell: pwsh

      - name: Set SDL2 UWP Paths
        run: |
          echo "CMAKE_INCLUDE_PATH=${{ env.SDL2_INCLUDE_PATH }}" | Out-File -FilePath $env:GITHUB_ENV -Append
          echo "CMAKE_LIBRARY_PATH=${{ env.SDL2_LIBRARY_PATH }}" | Out-File -FilePath $env:GITHUB_ENV -Append
          echo "CMAKE_BIN_PATH=${{ env.SDL2_BIN_PATH }}" | Out-File -FilePath $env:GITHUB_ENV -Append
        shell: pwsh

      - name: Configure CMake
        run: |
          cmake -B ${{ env.BUILD_DIR }} -S ${{ github.workspace }} `
            -G "Visual Studio 17 2022" `
            -A ${{ env.Platform }} `
            -DCMAKE_BUILD_TYPE=${{ env.Configuration }} `
            -DENABLE_USER_BUILD=ON `
            -DENABLE_QT_BUILD=ON `
            -DCMAKE_INCLUDE_PATH=${{ env.SDL2_INCLUDE_PATH }} `
            -DCMAKE_LIBRARY_PATH=${{ env.SDL2_LIBRARY_PATH }} `
            -DCMAKE_BIN_PATH=${{ env.SDL2_BIN_PATH }}
        shell: pwsh

      - name: Build with MSBuild
        run: |
          msbuild ${{ env.BUILD_DIR }}/duckstation.sln `
            /p:Platform=$env:Platform `
            /p:Configuration=$env:Configuration `
            /p:UapAppxPackageBuildMode=$env:BuildMode `
            /p:AppxBundle=$env:AppxBundle `
            /p:PackageCertificateThumbprint="${{ env.THUMBPRINT }}" `
            /p:AppxPackageTestDir="$env:PackageOutputRootDir\$env:PACKAGE_NAME" `
            /p:AppxPackageSigningEnabled=true `
            /p:WindowsTargetPlatformVersion=10.0.22621.0 `
            /p:WholeProgramOptimization=false `
            /restore
        shell: pwsh

      - name: Clean the Package
        run: |
          $PackagePath = "$env:PackageOutputRootDir\$env:PACKAGE_NAME"
          if (Test-Path $PackagePath) {
            Write-Host "Cleaning package directory: $PackagePath"
            Remove-Item -Recurse -Force -Path "$PackagePath\Add-AppDevPackage.resources" -ErrorAction SilentlyContinue
            Remove-Item -Recurse -Force -Path "$PackagePath\TelemetryDependencies" -ErrorAction SilentlyContinue
            Remove-Item -Recurse -Force -Path "$PackagePath\Dependencies\arm" -ErrorAction SilentlyContinue
            Remove-Item -Recurse -Force -Path "$PackagePath\Dependencies\arm64" -ErrorAction SilentlyContinue
            Remove-Item -Recurse -Force -Path "$PackagePath\Dependencies\x86" -ErrorAction SilentlyContinue
            Remove-Item -Recurse -Force -Path "$PackagePath\Dependencies\Win32" -ErrorAction SilentlyContinue
            Remove-Item -Recurse -Force -Path "$PackagePath\Add-AppDevPackage.ps1" -ErrorAction SilentlyContinue
            Remove-Item -Recurse -Force -Path "$PackagePath\Install.ps1" -ErrorAction SilentlyContinue
          } else {
            Write-Host "Package path does not exist: $PackagePath"
            exit 1
          }
        shell: pwsh

      - name: Create Archive
        run: |
          $PackagePath = "$env:PackageOutputRootDir\$env:PACKAGE_NAME"
          if (Test-Path $PackagePath) {
            Write-Host "Creating archive for: $PackagePath"
            Compress-Archive -Path "$PackagePath\*" -DestinationPath "$env:PackageOutputRootDir\$env:PACKAGE_NAME.zip"
            Write-Host "Contents of package output directory after archiving:"
            Get-ChildItem -Path "$env:PackageOutputRootDir" -Recurse
          } else {
            Write-Host "Package path does not exist for archiving: $PackagePath"
            exit 1
          }
        shell: pwsh

      - name: Upload Build Artifact
        uses: actions/upload-artifact@v4
        with:
          name: ${{ github.event.inputs.package_name }} Build
          path: ${{ env.PackageOutputRootDir }}\${{ env.PACKAGE_NAME }}.zip
