name: Build ReleaseUWP

on:
  workflow_dispatch:
    inputs:
      tag_name:
        description: 'Tag Name'
        required: true
        default: 'v1.0.0'
      package_name:
        description: 'Package Name'
        required: true
        default: 'ReleaseUWP'

jobs:
  build:
    runs-on: windows-latest

    env:
      SolutionPath: duckstation.sln
      Platform: x64
      Configuration: ReleaseUWP
      BuildMode: SideLoadOnly
      AppxBundle: Never
      ProjectPath: src/duckstation-uwp/duckstation-uwp.vcxproj
      ProjectDirectory: .\src\duckstation-uwp\
      PackageOutputRootDir: C:\AppPackage
      PackageOutputDir: ReleaseUWP

    steps:
      - name: Checkout Repository
        uses: actions/checkout@v4
        with:
          submodules: true
          fetch-depth: 0

      - name: Add MSBuild to PATH
        uses: microsoft/setup-msbuild@v1.1
        
      - name: Setup NuGet
        uses: NuGet/setup-nuget@v1.1.1

      - name: Restore NuGet Packages
        run: nuget restore $env:SolutionPath
        shell: pwsh

      - name: Generate Self-Signed Certificate
        id: generate_cert
        run: |
          $cert = New-SelfSignedCertificate -CertStoreLocation "Cert:\CurrentUser\My" -Subject "CN=MyUWPCert" -KeyAlgorithm RSA -KeyLength 2048 -Provider "Microsoft Enhanced RSA and AES Cryptographic Provider" -KeyExportPolicy Exportable -NotAfter (Get-Date).AddYears(1) -Type CodeSigningCert
          echo "THUMBPRINT=$($cert.Thumbprint)" | Out-File -FilePath $env:GITHUB_ENV -Append
        shell: pwsh

      - name: Set Package Name
        id: set_package_name
        run: echo "PACKAGE_NAME=${{ github.event.inputs.package_name }}_${{ github.event.inputs.tag_name }}" | Out-File -FilePath $env:GITHUB_ENV -Append
        shell: pwsh

      - name: CMake Configure
        run: |
          cmake -G "Visual Studio 17 2022" `
                -DCMAKE_SYSTEM_NAME=WindowsStore `
                -A x64 `
                -DCMAKE_SYSTEM_VERSION="10.0.19041.0" `
                -DCMAKE_SYSTEM_PROCESSOR="x86_64" `
                -DCMAKE_PREFIX_PATH="Qt6" `
                -B build
        shell: pwsh

      - name: Build Project
        run: cmake --build build --config Release
        shell: pwsh

      - name: App Package Build
        run: |
          msbuild $env:SolutionPath `
            /t:Rebuild `
            /p:Platform=$env:Platform `
            /p:Configuration=$env:Configuration `
            /p:UapAppxPackageBuildMode=$env:BuildMode `
            /p:AppxBundle=$env:AppxBundle `
            /p:PackageCertificateThumbprint="${{ env.THUMBPRINT }}" `
            /p:AppxPackageTestDir="$env:PackageOutputRootDir\$env:PACKAGE_NAME" `
            /p:AppxPackageSigningEnabled=true `
            /p:CppWinRTUseLatest=false `
            /p:CppWinRTVersion=2.0.230511.6 `
            /restore
        shell: pwsh

      - name: Clean the Package
        run: |
          $PackagePath = "$env:PackageOutputRootDir\$env:PACKAGE_NAME"
          if (Test-Path $PackagePath) {
            Write-Host "Cleaning package directory: $PackagePath"
            Remove-Item -Recurse -Force -Path "$PackagePath\Add-AppDevPackage.resources" -ErrorAction SilentlyContinue
            Remove-Item -Recurse -Force -Path "$PackagePath\TelemetryDependencies" -ErrorAction SilentlyContinue
            Remove-Item -Recurse -Force -Path "$PackagePath\Dependencies\arm" -ErrorAction SilentlyContinue
            Remove-Item -Recurse -Force -Path "$PackagePath\Dependencies\arm64" -ErrorAction SilentlyContinue
            Remove-Item -Recurse -Force -Path "$PackagePath\Dependencies\x86" -ErrorAction SilentlyContinue
            Remove-Item -Recurse -Force -Path "$PackagePath\Dependencies\Win32" -ErrorAction SilentlyContinue
            Remove-Item -Recurse -Force -Path "$PackagePath\Add-AppDevPackage.ps1" -ErrorAction SilentlyContinue
            Remove-Item -Recurse -Force -Path "$PackagePath\Install.ps1" -ErrorAction SilentlyContinue
          } else {
            Write-Host "Package path does not exist: $PackagePath"
            exit 1
          }
        shell: pwsh

      - name: Create Archive
        run: |
          $PackagePath = "$env:PackageOutputRootDir\$env:PACKAGE_NAME"
          if (Test-Path $PackagePath) {
            Write-Host "Creating archive for: $PackagePath"
            Compress-Archive -Path "$PackagePath\*" -DestinationPath "$env:PackageOutputRootDir\$env:PACKAGE_NAME.zip"
            Write-Host "Contents of package output directory after archiving:"
            Get-ChildItem -Path "$env:PackageOutputRootDir" -Recurse
          } else {
            Write-Host "Package path does not exist for archiving: $PackagePath"
            exit 1
          }
        shell: pwsh

      - name: Upload Build Artifact
        uses: actions/upload-artifact@v4
        with:
          name: ${{ github.event.inputs.package_name }} Build
          path: ${{ env.PackageOutputRootDir }}\${{ env.PACKAGE_NAME }}.zip
